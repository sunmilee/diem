initSidebarItems({"enum":[["NotificationFeedback","The feedback for a given notification."],["StreamRequest","The data streaming request from the client."]],"fn":[["new_streaming_service_client_listener_pair","This method returns a (StreamingServiceClient, StreamingServiceListener) pair that can be used to allow clients to make requests to the streaming service."]],"struct":[["ContinuouslyStreamTransactionOutputsRequest","A client request for continuously streaming transaction outputs with proofs"],["ContinuouslyStreamTransactionsRequest","A client request for continuously streaming transactions with proofs"],["GetAllAccountsRequest","A client request for fetching all account states at a specified version."],["GetAllEpochEndingLedgerInfosRequest","A client request for fetching all available epoch ending ledger infos."],["GetAllTransactionOutputsRequest","A client request for fetching all transaction outputs with proofs."],["GetAllTransactionsRequest","A client request for fetching all transactions with proofs."],["StreamRequestMessage","Messages used by the data streaming client for communication with the streaming service. The streaming service will respond to the client request through the given `response_sender`."],["StreamingServiceClient","The streaming service client that talks to the streaming service."],["StreamingServiceListener","The component that enables listening to requests from streaming service clients (e.g., state sync)."],["TerminateStreamRequest","A client request for terminating a stream and providing payload feedback."]],"trait":[["DataStreamingClient","The streaming client used by state sync to fetch data from the Diem network to synchronize local state."]],"type":[["Epoch",""]]});